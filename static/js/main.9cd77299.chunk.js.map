{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","submitHandler","e","preventDefault","setInterval","submitHandler2","axios","get","state","name","mode","then","res","console","log","rdesc","setState","status","number","changeHandler","target","value","this","name1","name0","name2","name3","name4","name5","name6","name7","name8","className","align","onSubmit","for","type","id","required","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8TAIqBA,E,kDACjB,aAAe,IAAD,8BACV,gBAOFC,cAAc,SAACC,GACbA,EAAEC,iBACGC,aAAY,WACX,EAAKC,mBACJ,MAZG,EAeZA,eAAe,WAEXC,IAAMC,IAAN,oEAAuE,EAAKC,MAAMC,KAAlF,2DAAgJ,CAAEC,KAAM,YACvJC,MAAK,SAAAC,GACLC,QAAQC,IAAIF,EAAIG,OACG,mCAAdH,EAAIG,OAER,EAAKC,SAAS,CACZC,OAAOL,EAAIG,WAKf,EAAKC,SAAS,CACZE,OAAQ,EAAKV,MAAMU,OAAS,KA7BtB,EAkCZC,cAAgB,SAAAjB,GACd,EAAKc,SAAL,eAAiBd,EAAEkB,OAAOX,KAAOP,EAAEkB,OAAOC,SAjC1C,EAAKb,MAAQ,CACXS,OAAO,GACPC,OAAQ,EACTT,KAAM,IALG,E,qDAsCJ,IAAD,EACgEa,KAAKd,MAAnEC,EADF,EACEA,KADF,EACOc,MADP,EACaC,MADb,EACmBC,MADnB,EACyBC,MADzB,EAC+BC,MAD/B,EACqCC,MADrC,EAC2CC,MAD3C,EACiDC,MADjD,EACuDC,MAC5D,OACI,yBAAKC,UAAU,OACb,wBAAIC,MAAM,UAAV,cACA,0BAAMD,UAAU,OAAOE,SAAUZ,KAAKrB,eACtC,yBAAK+B,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,cACd,2BAAOG,IAAI,QAAX,sBACX,2BAAOH,UAAU,eACTI,KAAK,SACLC,GAAG,OACH5B,KAAK,OACL6B,UAAQ,EACfjB,MAAOZ,EACP8B,SAAUjB,KAAKH,mBAMR,4BAAQa,UAAU,mBAAlB,oBAEE,6BAtBJ,IAsBc,6BAClB,wBAAIC,MAAM,UAAUX,KAAKd,MAAMS,QAC/B,wBAAIgB,MAAM,UAAUX,KAAKd,MAAMC,MAC/B,wBAAIwB,MAAM,UAAV,UAA2BX,KAAKd,MAAMU,a,GAnEbsB,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.9cd77299.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport axios from 'axios';\n\nexport default class App extends Component {\n    constructor() {\n        super();\n        this.state = {\n          status:'',\n          number: 1,\n         name: '',\n        };\n      }\n      submitHandler=(e)=> {\n        e.preventDefault() \n             setInterval(() => {\n              this.submitHandler2()\n            }, 1000);\n\n      }\n      submitHandler2=()=> {\n       \n          axios.get(`https://circle.robi.com.bd/mylife/api/appcall.php?&msisdn=${this.state.name}&op=getOTC&app_version=70&pin=21322&tkey=a947cac4749e82`,{ mode: 'no-cors' })\n          .then(res => {\n           console.log(res.rdesc);\n             if(res.rdesc === 'You have send too much request')\n          {\n            this.setState({\n              status:res.rdesc,\n            })\n            \n          } \n          })\n          this.setState({\n            number: this.state.number + 1,\n          })\n               \n      } \n\n      changeHandler = e => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n    \n    render() {\n        const {name,name1,name0,name2,name3,name4,name5,name6,name7,name8} = this.state\n        return (\n            <div className=\"App\">\n              <h4 align=\"center\">MUnlimited</h4>\n              <form className=\"form\" onSubmit={this.submitHandler}>\n              <div className=\"row\">\n                <div className=\"col-sm-4\"></div>\n                <div className=\"col-sm-4\">\n                <div className=\"form-group\"> \n                 <label for=\"name\">Enter Number Admin</label>\n\t\t\t\t\t\t<input className=\"form-control\"\n              type=\"number\"\n              id=\"name\"\n              name=\"name\"\n              required\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={this.changeHandler}\n\t\t\t\t\t\t/>\n            </div>\n                \n                </div>\n              </div>\n              <button className=\"btn btn-primary\" >Start Operation</button>\n             </form>\n                <br></br> <br></br>\n        <h6 align=\"center\">{this.state.status}</h6>\n        <h6 align=\"center\">{this.state.name}</h6>\n        <h4 align=\"center\">Count: {this.state.number}</h4>\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}